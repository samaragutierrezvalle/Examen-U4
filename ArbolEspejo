public class ArbolEspejo {
    NodoArbol2 raiz;
    //este constructo se encarga de iniciar la raiz en nulo, para saber cuando la raiz cambie a un dato diferente de nulo
    public ArbolEspejo (){
        raiz=null;
    }
    
//metodo para insertar un Nodo en el arbol
    
    public void agregarNodo(int d){
        NodoArbol2 nuevo= new NodoArbol2(d);
        
        if(raiz== null){
            raiz=nuevo;
        }
        else {
            NodoArbol2 auxiliar= raiz;
            NodoArbol2 padre;
            while(true){
                padre=auxiliar;
                if(d< auxiliar.dato){
                    auxiliar= auxiliar.hijoDerecho;
                    if(auxiliar== null){
                        padre.hijoDerecho= nuevo;
                        return;
                    }
                }
                else {
                    auxiliar=auxiliar.hijoIzquierdo;
                    if (auxiliar== null){
                        padre.hijoIzquierdo=nuevo;
                        return;
                    }
                }
            }
        }
    }
    //metodo para saber cuando el arbol esta vacio
    public boolean estaVacio (){
        return raiz==null;
    }
    //metodo para recorrer el Arbol inOrden
    public void inOrden(NodoArbol2 r){
        if (r!= null){
            inOrden(r.hijoIzquierdo);
            System.out.print(r.dato + ",");
            inOrden(r.hijoDerecho); 
        }
    }
    //Metodo para recorrer el Arbol en preorden
    public void preOrden(NodoArbol2 r){
        if (r!= null){
            System.out.print(r.dato + ",");
            preOrden(r.hijoIzquierdo);
            preOrden(r.hijoDerecho); 
        }
    }
    //metodo para recorrer el Arbol postOrden
     public void postOrden(NodoArbol2 r){
        if (r!= null){
            postOrden(r.hijoIzquierdo);
            postOrden(r.hijoDerecho); 
            System.out.print(r.dato + ",");
        }
     }
    //Metodo para buscar un Nodo en el Arbol
     public NodoArbol2 buscarNodo(int d){
         NodoArbol2 aux=raiz;
         while(aux.dato!= d){
             if (d< aux.dato){
                 aux=aux.hijoIzquierdo;
             }
             else {
                 aux=aux.hijoDerecho;
             }
             if(aux==null){
                 return null;
             }
         }
         return aux;
     }
    //Metodo para Eliminar un Nodo del Arbol
     public boolean eliminar(int d){
         NodoArbol2 auxiliar=raiz;
         NodoArbol2 padre=raiz;
         boolean esHijoIzq=true;
         while (auxiliar.dato!= d){
             padre=auxiliar;
             if(d<auxiliar.dato){
                 esHijoIzq=true;
                 auxiliar=auxiliar.hijoIzquierdo;
             }
             else{
                 esHijoIzq=false;
                 auxiliar=auxiliar.hijoDerecho;
             }
             if(auxiliar==null){
                 return false;
             }
         }//fin del while
         if (auxiliar.hijoIzquierdo==null && auxiliar.hijoDerecho==null){
             if (auxiliar== raiz){
                 raiz= null;
             }
             else if (esHijoIzq){
                 padre.hijoIzquierdo=null;
             }
             else {
                 padre.hijoDerecho= null;
             }
         }
         else if (auxiliar.hijoDerecho==null){
             if (auxiliar== raiz){
                 raiz= auxiliar.hijoIzquierdo;
             }
             else if (esHijoIzq){
                 padre.hijoIzquierdo=auxiliar.hijoIzquierdo;
             }
             else {
                 padre.hijoDerecho= auxiliar.hijoIzquierdo;
             }
         }
         else if(auxiliar.hijoIzquierdo==null){
             if (auxiliar== raiz){
                 raiz= auxiliar.hijoDerecho;
             }
             else if (esHijoIzq){
                 padre.hijoIzquierdo=auxiliar.hijoDerecho;
             }
             else {
                 padre.hijoDerecho= auxiliar.hijoIzquierdo;
             }
         }
         else {
             NodoArbol2 reemplazo= obtenerNodoReemplazo(auxiliar);
             if(auxiliar==raiz){
                 raiz=reemplazo;
             }
             else if (esHijoIzq){
             padre.hijoIzquierdo= reemplazo;
         }
         else {
                 padre.hijoDerecho= reemplazo;
                 }
             
         reemplazo.hijoIzquierdo=auxiliar.hijoIzquierdo;
                 }

     return true;
}
     //metodo para devolvernos el nodo reemplazo
     public NodoArbol2 obtenerNodoReemplazo(NodoArbol2 nodoReemp){
         NodoArbol2 reemplazarPadre= nodoReemp;
         NodoArbol2 reemplazo= nodoReemp;
         NodoArbol2 auxiliar= nodoReemp.hijoDerecho;
         while(auxiliar!=null){
             reemplazarPadre= reemplazo;
             reemplazo=auxiliar;
             auxiliar= auxiliar.hijoIzquierdo;
         }
         if (reemplazo!=nodoReemp.hijoDerecho){
             reemplazarPadre.hijoIzquierdo=reemplazo.hijoDerecho;
             reemplazo.hijoDerecho=nodoReemp.hijoDerecho;
         }
         System.out.println("El nodo Reemplazo es:" + reemplazo);
         return reemplazo;
     }

    
}
     
